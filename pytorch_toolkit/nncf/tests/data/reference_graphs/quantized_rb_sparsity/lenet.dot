strict digraph  {
"0 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=0, scope="LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"1 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=1, scope="LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"2 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=2, scope="LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"3 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]/symmetric_quantize" [id=3, scope="LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]", type=symmetric_quantize];
"4 LeNet/NNCFConv2d[conv1]/conv2d" [id=4, scope="LeNet/NNCFConv2d[conv1]", type=conv2d];
"5 LeNet/RELU" [id=5, scope=LeNet, type=RELU];
"6 LeNet/SymmetricQuantizer/symmetric_quantize" [id=6, scope="LeNet/SymmetricQuantizer", type=symmetric_quantize];
"7 LeNet/max_pool2d" [id=7, scope=LeNet, type=max_pool2d];
"8 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=8, scope="LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"9 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=9, scope="LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"10 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=10, scope="LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"11 LeNet/NNCFConv2d[conv2]/conv2d" [id=11, scope="LeNet/NNCFConv2d[conv2]", type=conv2d];
"12 LeNet/RELU" [id=12, scope=LeNet, type=RELU];
"13 LeNet/SymmetricQuantizer/symmetric_quantize" [id=13, scope="LeNet/SymmetricQuantizer", type=symmetric_quantize];
"14 LeNet/max_pool2d" [id=14, scope=LeNet, type=max_pool2d];
"15 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=15, scope="LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"16 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=16, scope="LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"17 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=17, scope="LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"18 LeNet/NNCFLinear[fc1]/linear" [id=18, scope="LeNet/NNCFLinear[fc1]", type=linear];
"19 LeNet/RELU" [id=19, scope=LeNet, type=RELU];
"20 LeNet/SymmetricQuantizer/symmetric_quantize" [id=20, scope="LeNet/SymmetricQuantizer", type=symmetric_quantize];
"21 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=21, scope="LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"22 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=22, scope="LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"23 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=23, scope="LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"24 LeNet/NNCFLinear[fc2]/linear" [id=24, scope="LeNet/NNCFLinear[fc2]", type=linear];
"25 LeNet/RELU" [id=25, scope=LeNet, type=RELU];
"26 LeNet/SymmetricQuantizer/symmetric_quantize" [id=26, scope="LeNet/SymmetricQuantizer", type=symmetric_quantize];
"27 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=27, scope="LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"28 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=28, scope="LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"29 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=29, scope="LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"30 LeNet/NNCFLinear[fc3]/linear" [id=30, scope="LeNet/NNCFLinear[fc3]", type=linear];
"0 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "1 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"1 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "2 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"2 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "4 LeNet/NNCFConv2d[conv1]/conv2d";
"3 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]/symmetric_quantize" -> "4 LeNet/NNCFConv2d[conv1]/conv2d";
"4 LeNet/NNCFConv2d[conv1]/conv2d" -> "5 LeNet/RELU";
"5 LeNet/RELU" -> "6 LeNet/SymmetricQuantizer/symmetric_quantize";
"6 LeNet/SymmetricQuantizer/symmetric_quantize" -> "7 LeNet/max_pool2d";
"8 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "9 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"7 LeNet/max_pool2d" -> "11 LeNet/NNCFConv2d[conv2]/conv2d";
"9 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "10 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"10 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "11 LeNet/NNCFConv2d[conv2]/conv2d";
"11 LeNet/NNCFConv2d[conv2]/conv2d" -> "12 LeNet/RELU";
"12 LeNet/RELU" -> "13 LeNet/SymmetricQuantizer/symmetric_quantize";
"13 LeNet/SymmetricQuantizer/symmetric_quantize" -> "14 LeNet/max_pool2d";
"14 LeNet/max_pool2d" -> "18 LeNet/NNCFLinear[fc1]/linear";
"15 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "16 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"16 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "17 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"17 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "18 LeNet/NNCFLinear[fc1]/linear";
"18 LeNet/NNCFLinear[fc1]/linear" -> "19 LeNet/RELU";
"19 LeNet/RELU" -> "20 LeNet/SymmetricQuantizer/symmetric_quantize";
"20 LeNet/SymmetricQuantizer/symmetric_quantize" -> "24 LeNet/NNCFLinear[fc2]/linear";
"21 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "22 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"22 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "23 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"23 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "24 LeNet/NNCFLinear[fc2]/linear";
"24 LeNet/NNCFLinear[fc2]/linear" -> "25 LeNet/RELU";
"25 LeNet/RELU" -> "26 LeNet/SymmetricQuantizer/symmetric_quantize";
"26 LeNet/SymmetricQuantizer/symmetric_quantize" -> "30 LeNet/NNCFLinear[fc3]/linear";
"27 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "28 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"28 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "29 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"29 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "30 LeNet/NNCFLinear[fc3]/linear";
}
