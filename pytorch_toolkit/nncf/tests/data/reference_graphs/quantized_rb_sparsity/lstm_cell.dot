strict digraph  {
"0 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=0, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"1 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=1, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"2 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=2, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"3 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]/symmetric_quantize" [id=3, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]", type=symmetric_quantize];
"4 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/linear" [id=4, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]", type=linear];
"5 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/SymmetricQuantizer/symmetric_quantize" [id=5, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/SymmetricQuantizer", type=symmetric_quantize];
"6 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=6, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"7 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=7, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"8 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=8, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"9 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]/symmetric_quantize" [id=9, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]", type=symmetric_quantize];
"10 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/linear" [id=10, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]", type=linear];
"11 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/SymmetricQuantizer/symmetric_quantize" [id=11, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/SymmetricQuantizer", type=symmetric_quantize];
"12 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__" [id=12, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=__add__];
"13 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" [id=13, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer", type=symmetric_quantize];
"14 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid" [id=14, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=sigmoid];
"15 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" [id=15, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer", type=symmetric_quantize];
"16 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid" [id=16, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=sigmoid];
"17 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" [id=17, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer", type=symmetric_quantize];
"18 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/tanh" [id=18, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=tanh];
"19 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid" [id=19, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=sigmoid];
"20 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" [id=20, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer", type=symmetric_quantize];
"21 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__" [id=21, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=__mul__];
"22 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" [id=22, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer", type=symmetric_quantize];
"23 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__" [id=23, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=__mul__];
"24 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" [id=24, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer", type=symmetric_quantize];
"25 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__" [id=25, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=__add__];
"26 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" [id=26, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer", type=symmetric_quantize];
"27 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/tanh" [id=27, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=tanh];
"28 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__" [id=28, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=__mul__];
"0 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "1 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"1 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "2 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"2 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "4 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/linear";
"3 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]/symmetric_quantize" -> "4 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/linear";
"4 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/linear" -> "5 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/SymmetricQuantizer/symmetric_quantize";
"6 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "7 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"7 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "8 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"5 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/SymmetricQuantizer/symmetric_quantize" -> "12 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__";
"8 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "10 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/linear";
"9 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]/symmetric_quantize" -> "10 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/linear";
"10 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/linear" -> "11 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/SymmetricQuantizer/symmetric_quantize";
"11 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/SymmetricQuantizer/symmetric_quantize" -> "12 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__";
"12 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__" -> "13 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize";
"13 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" -> "14 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid";
"13 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" -> "16 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid";
"13 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" -> "18 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/tanh";
"13 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" -> "19 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid";
"14 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid" -> "15 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize";
"15 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" -> "23 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__";
"16 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid" -> "17 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize";
"17 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" -> "21 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__";
"18 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/tanh" -> "23 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__";
"19 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid" -> "20 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize";
"20 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" -> "28 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__";
"21 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__" -> "22 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize";
"22 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" -> "25 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__";
"23 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__" -> "24 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize";
"24 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" -> "25 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__";
"25 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__" -> "26 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize";
"26 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/SymmetricQuantizer/symmetric_quantize" -> "27 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/tanh";
"27 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/tanh" -> "28 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__";
}
