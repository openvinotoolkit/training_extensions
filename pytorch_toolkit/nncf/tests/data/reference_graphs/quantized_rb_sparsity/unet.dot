strict digraph  {
"0 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=0, scope="UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"1 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=1, scope="UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"2 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=2, scope="UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"3 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]/symmetric_quantize" [id=3, scope="UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]", type=symmetric_quantize];
"4 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/conv2d" [id=4, scope="UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]", type=conv2d];
"5 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/BatchNorm2d[1]/batch_norm" [id=5, scope="UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/BatchNorm2d[1]", type=batch_norm];
"6 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[2]/RELU" [id=6, scope="UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[2]", type=RELU];
"7 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" [id=7, scope="UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[2]/SymmetricQuantizer", type=symmetric_quantize];
"8 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=8, scope="UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"9 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=9, scope="UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"10 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=10, scope="UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"11 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]/conv2d" [id=11, scope="UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]", type=conv2d];
"12 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/BatchNorm2d[4]/batch_norm" [id=12, scope="UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/BatchNorm2d[4]", type=batch_norm];
"13 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[5]/RELU" [id=13, scope="UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[5]", type=RELU];
"14 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" [id=14, scope="UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[5]/SymmetricQuantizer", type=symmetric_quantize];
"15 UNet/max_pool2d" [id=15, scope=UNet, type=max_pool2d];
"16 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=16, scope="UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"17 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=17, scope="UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"18 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=18, scope="UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"19 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]/conv2d" [id=19, scope="UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]", type=conv2d];
"20 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/BatchNorm2d[1]/batch_norm" [id=20, scope="UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/BatchNorm2d[1]", type=batch_norm];
"21 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[2]/RELU" [id=21, scope="UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[2]", type=RELU];
"22 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" [id=22, scope="UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[2]/SymmetricQuantizer", type=symmetric_quantize];
"23 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=23, scope="UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"24 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=24, scope="UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"25 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=25, scope="UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"26 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]/conv2d" [id=26, scope="UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]", type=conv2d];
"27 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/BatchNorm2d[4]/batch_norm" [id=27, scope="UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/BatchNorm2d[4]", type=batch_norm];
"28 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[5]/RELU" [id=28, scope="UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[5]", type=RELU];
"29 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" [id=29, scope="UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[5]/SymmetricQuantizer", type=symmetric_quantize];
"30 UNet/max_pool2d" [id=30, scope=UNet, type=max_pool2d];
"31 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=31, scope="UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"32 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=32, scope="UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"33 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=33, scope="UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"34 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]/conv2d" [id=34, scope="UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]", type=conv2d];
"35 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/BatchNorm2d[1]/batch_norm" [id=35, scope="UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/BatchNorm2d[1]", type=batch_norm];
"36 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[2]/RELU" [id=36, scope="UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[2]", type=RELU];
"37 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" [id=37, scope="UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[2]/SymmetricQuantizer", type=symmetric_quantize];
"38 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=38, scope="UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"39 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=39, scope="UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"40 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=40, scope="UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"41 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]/conv2d" [id=41, scope="UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]", type=conv2d];
"42 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/BatchNorm2d[4]/batch_norm" [id=42, scope="UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/BatchNorm2d[4]", type=batch_norm];
"43 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[5]/RELU" [id=43, scope="UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[5]", type=RELU];
"44 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" [id=44, scope="UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[5]/SymmetricQuantizer", type=symmetric_quantize];
"45 UNet/max_pool2d" [id=45, scope=UNet, type=max_pool2d];
"46 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=46, scope="UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"47 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=47, scope="UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"48 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=48, scope="UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"49 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]/conv2d" [id=49, scope="UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]", type=conv2d];
"50 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/BatchNorm2d[1]/batch_norm" [id=50, scope="UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/BatchNorm2d[1]", type=batch_norm];
"51 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[2]/RELU" [id=51, scope="UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[2]", type=RELU];
"52 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" [id=52, scope="UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[2]/SymmetricQuantizer", type=symmetric_quantize];
"53 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=53, scope="UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"54 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=54, scope="UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"55 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=55, scope="UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"56 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]/conv2d" [id=56, scope="UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]", type=conv2d];
"57 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/BatchNorm2d[4]/batch_norm" [id=57, scope="UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/BatchNorm2d[4]", type=batch_norm];
"58 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[5]/RELU" [id=58, scope="UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[5]", type=RELU];
"59 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" [id=59, scope="UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[5]/SymmetricQuantizer", type=symmetric_quantize];
"60 UNet/max_pool2d" [id=60, scope=UNet, type=max_pool2d];
"61 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=61, scope="UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"62 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=62, scope="UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"63 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=63, scope="UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"64 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]/conv2d" [id=64, scope="UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]", type=conv2d];
"65 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/BatchNorm2d[1]/batch_norm" [id=65, scope="UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/BatchNorm2d[1]", type=batch_norm];
"66 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[2]/RELU" [id=66, scope="UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[2]", type=RELU];
"67 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" [id=67, scope="UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[2]/SymmetricQuantizer", type=symmetric_quantize];
"68 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=68, scope="UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"69 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=69, scope="UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"70 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=70, scope="UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"71 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]/conv2d" [id=71, scope="UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]", type=conv2d];
"72 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/BatchNorm2d[4]/batch_norm" [id=72, scope="UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/BatchNorm2d[4]", type=batch_norm];
"73 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[5]/RELU" [id=73, scope="UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[5]", type=RELU];
"74 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" [id=74, scope="UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[5]/SymmetricQuantizer", type=symmetric_quantize];
"75 UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=75, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"76 UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=76, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"77 UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=77, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"78 UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/conv_transpose2d" [id=78, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]", type=conv_transpose2d];
"79 UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/SymmetricQuantizer/symmetric_quantize" [id=79, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/SymmetricQuantizer", type=symmetric_quantize];
"80 UNet/ModuleList[up_path]/UNetUpBlock[0]/cat" [id=80, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]", type=cat];
"81 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=81, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"82 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=82, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"83 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=83, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"84 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/conv2d" [id=84, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]", type=conv2d];
"85 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[1]/batch_norm" [id=85, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[1]", type=batch_norm];
"86 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/RELU" [id=86, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]", type=RELU];
"87 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" [id=87, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/SymmetricQuantizer", type=symmetric_quantize];
"88 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=88, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"89 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=89, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"90 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=90, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"91 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/conv2d" [id=91, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]", type=conv2d];
"92 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[4]/batch_norm" [id=92, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[4]", type=batch_norm];
"93 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/RELU" [id=93, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]", type=RELU];
"94 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" [id=94, scope="UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/SymmetricQuantizer", type=symmetric_quantize];
"95 UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=95, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"96 UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=96, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"97 UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=97, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"98 UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/conv_transpose2d" [id=98, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]", type=conv_transpose2d];
"99 UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/SymmetricQuantizer/symmetric_quantize" [id=99, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/SymmetricQuantizer", type=symmetric_quantize];
"100 UNet/ModuleList[up_path]/UNetUpBlock[1]/cat" [id=100, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]", type=cat];
"101 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=101, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"102 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=102, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"103 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=103, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"104 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/conv2d" [id=104, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]", type=conv2d];
"105 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[1]/batch_norm" [id=105, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[1]", type=batch_norm];
"106 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/RELU" [id=106, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]", type=RELU];
"107 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" [id=107, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/SymmetricQuantizer", type=symmetric_quantize];
"108 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=108, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"109 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=109, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"110 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=110, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"111 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/conv2d" [id=111, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]", type=conv2d];
"112 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[4]/batch_norm" [id=112, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[4]", type=batch_norm];
"113 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/RELU" [id=113, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]", type=RELU];
"114 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" [id=114, scope="UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/SymmetricQuantizer", type=symmetric_quantize];
"115 UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=115, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"116 UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=116, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"117 UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=117, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"118 UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/conv_transpose2d" [id=118, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]", type=conv_transpose2d];
"119 UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/SymmetricQuantizer/symmetric_quantize" [id=119, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/SymmetricQuantizer", type=symmetric_quantize];
"120 UNet/ModuleList[up_path]/UNetUpBlock[2]/cat" [id=120, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]", type=cat];
"121 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=121, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"122 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=122, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"123 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=123, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"124 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/conv2d" [id=124, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]", type=conv2d];
"125 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[1]/batch_norm" [id=125, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[1]", type=batch_norm];
"126 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/RELU" [id=126, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]", type=RELU];
"127 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" [id=127, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/SymmetricQuantizer", type=symmetric_quantize];
"128 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=128, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"129 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=129, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"130 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=130, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"131 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/conv2d" [id=131, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]", type=conv2d];
"132 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[4]/batch_norm" [id=132, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[4]", type=batch_norm];
"133 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/RELU" [id=133, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]", type=RELU];
"134 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" [id=134, scope="UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/SymmetricQuantizer", type=symmetric_quantize];
"135 UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=135, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"136 UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=136, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"137 UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=137, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"138 UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/conv_transpose2d" [id=138, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]", type=conv_transpose2d];
"139 UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/SymmetricQuantizer/symmetric_quantize" [id=139, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/SymmetricQuantizer", type=symmetric_quantize];
"140 UNet/ModuleList[up_path]/UNetUpBlock[3]/cat" [id=140, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]", type=cat];
"141 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=141, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"142 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=142, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"143 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=143, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"144 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/conv2d" [id=144, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]", type=conv2d];
"145 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[1]/batch_norm" [id=145, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[1]", type=batch_norm];
"146 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/RELU" [id=146, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]", type=RELU];
"147 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" [id=147, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/SymmetricQuantizer", type=symmetric_quantize];
"148 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=148, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"149 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=149, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"150 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=150, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"151 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/conv2d" [id=151, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]", type=conv2d];
"152 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[4]/batch_norm" [id=152, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[4]", type=batch_norm];
"153 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/RELU" [id=153, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]", type=RELU];
"154 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" [id=154, scope="UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/SymmetricQuantizer", type=symmetric_quantize];
"155 UNet/NNCFConv2d[last]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=155, scope="UNet/NNCFConv2d[last]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"156 UNet/NNCFConv2d[last]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=156, scope="UNet/NNCFConv2d[last]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"157 UNet/NNCFConv2d[last]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=157, scope="UNet/NNCFConv2d[last]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"158 UNet/NNCFConv2d[last]/conv2d" [id=158, scope="UNet/NNCFConv2d[last]", type=conv2d];
"0 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "1 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"1 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "2 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"2 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "4 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/conv2d";
"3 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]/symmetric_quantize" -> "4 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/conv2d";
"4 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/conv2d" -> "5 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/BatchNorm2d[1]/batch_norm";
"5 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/BatchNorm2d[1]/batch_norm" -> "6 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[2]/RELU";
"6 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[2]/RELU" -> "7 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize";
"8 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "9 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"7 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" -> "11 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]/conv2d";
"9 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "10 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"10 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "11 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]/conv2d";
"11 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]/conv2d" -> "12 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/BatchNorm2d[4]/batch_norm";
"12 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/BatchNorm2d[4]/batch_norm" -> "13 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[5]/RELU";
"13 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[5]/RELU" -> "14 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize";
"14 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" -> "15 UNet/max_pool2d";
"15 UNet/max_pool2d" -> "19 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]/conv2d";
"16 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "17 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"17 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "18 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"18 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "19 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]/conv2d";
"19 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]/conv2d" -> "20 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/BatchNorm2d[1]/batch_norm";
"20 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/BatchNorm2d[1]/batch_norm" -> "21 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[2]/RELU";
"21 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[2]/RELU" -> "22 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize";
"22 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" -> "26 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]/conv2d";
"23 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "24 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"24 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "25 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"25 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "26 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]/conv2d";
"26 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]/conv2d" -> "27 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/BatchNorm2d[4]/batch_norm";
"27 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/BatchNorm2d[4]/batch_norm" -> "28 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[5]/RELU";
"28 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[5]/RELU" -> "29 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize";
"29 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" -> "30 UNet/max_pool2d";
"30 UNet/max_pool2d" -> "34 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]/conv2d";
"31 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "32 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"32 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "33 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"33 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "34 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]/conv2d";
"34 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]/conv2d" -> "35 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/BatchNorm2d[1]/batch_norm";
"35 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/BatchNorm2d[1]/batch_norm" -> "36 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[2]/RELU";
"36 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[2]/RELU" -> "37 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize";
"37 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" -> "41 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]/conv2d";
"38 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "39 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"39 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "40 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"40 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "41 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]/conv2d";
"41 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]/conv2d" -> "42 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/BatchNorm2d[4]/batch_norm";
"42 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/BatchNorm2d[4]/batch_norm" -> "43 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[5]/RELU";
"43 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[5]/RELU" -> "44 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize";
"44 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" -> "45 UNet/max_pool2d";
"45 UNet/max_pool2d" -> "49 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]/conv2d";
"46 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "47 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"47 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "48 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"48 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "49 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]/conv2d";
"49 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]/conv2d" -> "50 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/BatchNorm2d[1]/batch_norm";
"50 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/BatchNorm2d[1]/batch_norm" -> "51 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[2]/RELU";
"51 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[2]/RELU" -> "52 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize";
"52 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" -> "56 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]/conv2d";
"53 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "54 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"54 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "55 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"55 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "56 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]/conv2d";
"56 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]/conv2d" -> "57 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/BatchNorm2d[4]/batch_norm";
"57 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/BatchNorm2d[4]/batch_norm" -> "58 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[5]/RELU";
"58 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[5]/RELU" -> "59 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize";
"59 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" -> "60 UNet/max_pool2d";
"59 UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" -> "80 UNet/ModuleList[up_path]/UNetUpBlock[0]/cat";
"60 UNet/max_pool2d" -> "64 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]/conv2d";
"61 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "62 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"62 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "63 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"63 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "64 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]/conv2d";
"64 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]/conv2d" -> "65 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/BatchNorm2d[1]/batch_norm";
"65 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/BatchNorm2d[1]/batch_norm" -> "66 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[2]/RELU";
"66 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[2]/RELU" -> "67 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize";
"67 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" -> "71 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]/conv2d";
"68 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "69 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"69 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "70 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"70 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "71 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]/conv2d";
"71 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]/conv2d" -> "72 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/BatchNorm2d[4]/batch_norm";
"72 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/BatchNorm2d[4]/batch_norm" -> "73 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[5]/RELU";
"73 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[5]/RELU" -> "74 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize";
"74 UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" -> "78 UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/conv_transpose2d";
"75 UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "76 UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"76 UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "77 UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"77 UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "78 UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/conv_transpose2d";
"78 UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/conv_transpose2d" -> "79 UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/SymmetricQuantizer/symmetric_quantize";
"79 UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/SymmetricQuantizer/symmetric_quantize" -> "80 UNet/ModuleList[up_path]/UNetUpBlock[0]/cat";
"80 UNet/ModuleList[up_path]/UNetUpBlock[0]/cat" -> "84 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/conv2d";
"81 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "82 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"82 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "83 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"83 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "84 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/conv2d";
"84 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/conv2d" -> "85 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[1]/batch_norm";
"85 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[1]/batch_norm" -> "86 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/RELU";
"86 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/RELU" -> "87 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize";
"87 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" -> "91 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/conv2d";
"88 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "89 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"89 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "90 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"90 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "91 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/conv2d";
"91 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/conv2d" -> "92 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[4]/batch_norm";
"92 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[4]/batch_norm" -> "93 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/RELU";
"93 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/RELU" -> "94 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize";
"94 UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" -> "98 UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/conv_transpose2d";
"95 UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "96 UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"96 UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "97 UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"97 UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "98 UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/conv_transpose2d";
"98 UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/conv_transpose2d" -> "99 UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/SymmetricQuantizer/symmetric_quantize";
"14 UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" -> "140 UNet/ModuleList[up_path]/UNetUpBlock[3]/cat";
"29 UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" -> "120 UNet/ModuleList[up_path]/UNetUpBlock[2]/cat";
"44 UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" -> "100 UNet/ModuleList[up_path]/UNetUpBlock[1]/cat";
"99 UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/SymmetricQuantizer/symmetric_quantize" -> "100 UNet/ModuleList[up_path]/UNetUpBlock[1]/cat";
"100 UNet/ModuleList[up_path]/UNetUpBlock[1]/cat" -> "104 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/conv2d";
"101 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "102 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"102 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "103 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"103 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "104 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/conv2d";
"104 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/conv2d" -> "105 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[1]/batch_norm";
"105 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[1]/batch_norm" -> "106 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/RELU";
"106 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/RELU" -> "107 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize";
"107 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" -> "111 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/conv2d";
"108 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "109 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"109 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "110 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"110 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "111 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/conv2d";
"111 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/conv2d" -> "112 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[4]/batch_norm";
"112 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[4]/batch_norm" -> "113 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/RELU";
"113 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/RELU" -> "114 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize";
"114 UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" -> "118 UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/conv_transpose2d";
"115 UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "116 UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"116 UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "117 UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"117 UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "118 UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/conv_transpose2d";
"118 UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/conv_transpose2d" -> "119 UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/SymmetricQuantizer/symmetric_quantize";
"119 UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/SymmetricQuantizer/symmetric_quantize" -> "120 UNet/ModuleList[up_path]/UNetUpBlock[2]/cat";
"120 UNet/ModuleList[up_path]/UNetUpBlock[2]/cat" -> "124 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/conv2d";
"121 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "122 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"122 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "123 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"123 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "124 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/conv2d";
"124 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/conv2d" -> "125 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[1]/batch_norm";
"125 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[1]/batch_norm" -> "126 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/RELU";
"126 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/RELU" -> "127 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize";
"127 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" -> "131 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/conv2d";
"128 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "129 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"129 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "130 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"130 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "131 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/conv2d";
"131 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/conv2d" -> "132 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[4]/batch_norm";
"132 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[4]/batch_norm" -> "133 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/RELU";
"133 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/RELU" -> "134 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize";
"134 UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" -> "138 UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/conv_transpose2d";
"135 UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "136 UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"136 UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "137 UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"137 UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "138 UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/conv_transpose2d";
"138 UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/conv_transpose2d" -> "139 UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/SymmetricQuantizer/symmetric_quantize";
"139 UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/SymmetricQuantizer/symmetric_quantize" -> "140 UNet/ModuleList[up_path]/UNetUpBlock[3]/cat";
"140 UNet/ModuleList[up_path]/UNetUpBlock[3]/cat" -> "144 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/conv2d";
"141 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "142 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"142 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "143 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"143 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "144 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/conv2d";
"144 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/conv2d" -> "145 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[1]/batch_norm";
"145 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[1]/batch_norm" -> "146 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/RELU";
"146 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/RELU" -> "147 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize";
"147 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" -> "151 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/conv2d";
"148 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "149 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"149 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "150 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"150 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "151 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/conv2d";
"151 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/conv2d" -> "152 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[4]/batch_norm";
"152 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/BatchNorm2d[4]/batch_norm" -> "153 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/RELU";
"153 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/RELU" -> "154 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize";
"154 UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" -> "158 UNet/NNCFConv2d[last]/conv2d";
"155 UNet/NNCFConv2d[last]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "156 UNet/NNCFConv2d[last]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"156 UNet/NNCFConv2d[last]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "157 UNet/NNCFConv2d[last]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"157 UNet/NNCFConv2d[last]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "158 UNet/NNCFConv2d[last]/conv2d";
}
