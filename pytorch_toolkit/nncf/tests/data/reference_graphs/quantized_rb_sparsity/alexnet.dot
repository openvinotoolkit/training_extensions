strict digraph  {
"0 /nncf_model_input" [id=0, scope="", type=nncf_model_input];
"1 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=1, scope="AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"2 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=2, scope="AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"3 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=3, scope="AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"4 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]/symmetric_quantize" [id=4, scope="AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]", type=symmetric_quantize];
"5 AlexNet/Sequential[features]/NNCFConv2d[0]/conv2d" [id=5, scope="AlexNet/Sequential[features]/NNCFConv2d[0]", type=conv2d];
"6 AlexNet/Sequential[features]/ReLU[1]/RELU" [id=6, scope="AlexNet/Sequential[features]/ReLU[1]", type=RELU];
"7 AlexNet/Sequential[features]/ReLU[1]/SymmetricQuantizer/symmetric_quantize" [id=7, scope="AlexNet/Sequential[features]/ReLU[1]/SymmetricQuantizer", type=symmetric_quantize];
"8 AlexNet/Sequential[features]/MaxPool2d[2]/max_pool2d" [id=8, scope="AlexNet/Sequential[features]/MaxPool2d[2]", type=max_pool2d];
"9 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=9, scope="AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"10 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=10, scope="AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"11 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=11, scope="AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"12 AlexNet/Sequential[features]/NNCFConv2d[3]/conv2d" [id=12, scope="AlexNet/Sequential[features]/NNCFConv2d[3]", type=conv2d];
"13 AlexNet/Sequential[features]/ReLU[4]/RELU" [id=13, scope="AlexNet/Sequential[features]/ReLU[4]", type=RELU];
"14 AlexNet/Sequential[features]/ReLU[4]/SymmetricQuantizer/symmetric_quantize" [id=14, scope="AlexNet/Sequential[features]/ReLU[4]/SymmetricQuantizer", type=symmetric_quantize];
"15 AlexNet/Sequential[features]/MaxPool2d[5]/max_pool2d" [id=15, scope="AlexNet/Sequential[features]/MaxPool2d[5]", type=max_pool2d];
"16 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=16, scope="AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"17 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=17, scope="AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"18 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=18, scope="AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"19 AlexNet/Sequential[features]/NNCFConv2d[6]/conv2d" [id=19, scope="AlexNet/Sequential[features]/NNCFConv2d[6]", type=conv2d];
"20 AlexNet/Sequential[features]/ReLU[7]/RELU" [id=20, scope="AlexNet/Sequential[features]/ReLU[7]", type=RELU];
"21 AlexNet/Sequential[features]/ReLU[7]/SymmetricQuantizer/symmetric_quantize" [id=21, scope="AlexNet/Sequential[features]/ReLU[7]/SymmetricQuantizer", type=symmetric_quantize];
"22 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=22, scope="AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"23 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=23, scope="AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"24 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=24, scope="AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"25 AlexNet/Sequential[features]/NNCFConv2d[8]/conv2d" [id=25, scope="AlexNet/Sequential[features]/NNCFConv2d[8]", type=conv2d];
"26 AlexNet/Sequential[features]/ReLU[9]/RELU" [id=26, scope="AlexNet/Sequential[features]/ReLU[9]", type=RELU];
"27 AlexNet/Sequential[features]/ReLU[9]/SymmetricQuantizer/symmetric_quantize" [id=27, scope="AlexNet/Sequential[features]/ReLU[9]/SymmetricQuantizer", type=symmetric_quantize];
"28 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=28, scope="AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"29 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=29, scope="AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"30 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=30, scope="AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"31 AlexNet/Sequential[features]/NNCFConv2d[10]/conv2d" [id=31, scope="AlexNet/Sequential[features]/NNCFConv2d[10]", type=conv2d];
"32 AlexNet/Sequential[features]/ReLU[11]/RELU" [id=32, scope="AlexNet/Sequential[features]/ReLU[11]", type=RELU];
"33 AlexNet/Sequential[features]/ReLU[11]/SymmetricQuantizer/symmetric_quantize" [id=33, scope="AlexNet/Sequential[features]/ReLU[11]/SymmetricQuantizer", type=symmetric_quantize];
"34 AlexNet/Sequential[features]/MaxPool2d[12]/max_pool2d" [id=34, scope="AlexNet/Sequential[features]/MaxPool2d[12]", type=max_pool2d];
"35 AlexNet/Sequential[classifier]/Dropout[0]/dropout" [id=35, scope="AlexNet/Sequential[classifier]/Dropout[0]", type=dropout];
"36 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=36, scope="AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"37 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=37, scope="AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"38 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=38, scope="AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"39 AlexNet/Sequential[classifier]/NNCFLinear[1]/linear" [id=39, scope="AlexNet/Sequential[classifier]/NNCFLinear[1]", type=linear];
"40 AlexNet/Sequential[classifier]/ReLU[2]/RELU" [id=40, scope="AlexNet/Sequential[classifier]/ReLU[2]", type=RELU];
"41 AlexNet/Sequential[classifier]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" [id=41, scope="AlexNet/Sequential[classifier]/ReLU[2]/SymmetricQuantizer", type=symmetric_quantize];
"42 AlexNet/Sequential[classifier]/Dropout[3]/dropout" [id=42, scope="AlexNet/Sequential[classifier]/Dropout[3]", type=dropout];
"43 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=43, scope="AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"44 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=44, scope="AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"45 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=45, scope="AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"46 AlexNet/Sequential[classifier]/NNCFLinear[4]/linear" [id=46, scope="AlexNet/Sequential[classifier]/NNCFLinear[4]", type=linear];
"47 AlexNet/Sequential[classifier]/ReLU[5]/RELU" [id=47, scope="AlexNet/Sequential[classifier]/ReLU[5]", type=RELU];
"48 AlexNet/Sequential[classifier]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" [id=48, scope="AlexNet/Sequential[classifier]/ReLU[5]/SymmetricQuantizer", type=symmetric_quantize];
"49 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=49, scope="AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"50 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=50, scope="AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"51 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=51, scope="AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"52 AlexNet/Sequential[classifier]/NNCFLinear[6]/linear" [id=52, scope="AlexNet/Sequential[classifier]/NNCFLinear[6]", type=linear];
"0 /nncf_model_input" -> "4 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]/symmetric_quantize";
"1 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "2 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"2 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "3 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"3 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "5 AlexNet/Sequential[features]/NNCFConv2d[0]/conv2d";
"4 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]/symmetric_quantize" -> "5 AlexNet/Sequential[features]/NNCFConv2d[0]/conv2d";
"5 AlexNet/Sequential[features]/NNCFConv2d[0]/conv2d" -> "6 AlexNet/Sequential[features]/ReLU[1]/RELU";
"6 AlexNet/Sequential[features]/ReLU[1]/RELU" -> "7 AlexNet/Sequential[features]/ReLU[1]/SymmetricQuantizer/symmetric_quantize";
"7 AlexNet/Sequential[features]/ReLU[1]/SymmetricQuantizer/symmetric_quantize" -> "8 AlexNet/Sequential[features]/MaxPool2d[2]/max_pool2d";
"8 AlexNet/Sequential[features]/MaxPool2d[2]/max_pool2d" -> "12 AlexNet/Sequential[features]/NNCFConv2d[3]/conv2d";
"9 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "10 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"10 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "11 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"11 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "12 AlexNet/Sequential[features]/NNCFConv2d[3]/conv2d";
"12 AlexNet/Sequential[features]/NNCFConv2d[3]/conv2d" -> "13 AlexNet/Sequential[features]/ReLU[4]/RELU";
"13 AlexNet/Sequential[features]/ReLU[4]/RELU" -> "14 AlexNet/Sequential[features]/ReLU[4]/SymmetricQuantizer/symmetric_quantize";
"14 AlexNet/Sequential[features]/ReLU[4]/SymmetricQuantizer/symmetric_quantize" -> "15 AlexNet/Sequential[features]/MaxPool2d[5]/max_pool2d";
"15 AlexNet/Sequential[features]/MaxPool2d[5]/max_pool2d" -> "19 AlexNet/Sequential[features]/NNCFConv2d[6]/conv2d";
"16 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "17 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"17 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "18 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"18 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "19 AlexNet/Sequential[features]/NNCFConv2d[6]/conv2d";
"19 AlexNet/Sequential[features]/NNCFConv2d[6]/conv2d" -> "20 AlexNet/Sequential[features]/ReLU[7]/RELU";
"20 AlexNet/Sequential[features]/ReLU[7]/RELU" -> "21 AlexNet/Sequential[features]/ReLU[7]/SymmetricQuantizer/symmetric_quantize";
"21 AlexNet/Sequential[features]/ReLU[7]/SymmetricQuantizer/symmetric_quantize" -> "25 AlexNet/Sequential[features]/NNCFConv2d[8]/conv2d";
"22 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "23 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"23 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "24 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"24 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "25 AlexNet/Sequential[features]/NNCFConv2d[8]/conv2d";
"25 AlexNet/Sequential[features]/NNCFConv2d[8]/conv2d" -> "26 AlexNet/Sequential[features]/ReLU[9]/RELU";
"26 AlexNet/Sequential[features]/ReLU[9]/RELU" -> "27 AlexNet/Sequential[features]/ReLU[9]/SymmetricQuantizer/symmetric_quantize";
"27 AlexNet/Sequential[features]/ReLU[9]/SymmetricQuantizer/symmetric_quantize" -> "31 AlexNet/Sequential[features]/NNCFConv2d[10]/conv2d";
"28 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "29 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"29 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "30 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"30 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "31 AlexNet/Sequential[features]/NNCFConv2d[10]/conv2d";
"31 AlexNet/Sequential[features]/NNCFConv2d[10]/conv2d" -> "32 AlexNet/Sequential[features]/ReLU[11]/RELU";
"32 AlexNet/Sequential[features]/ReLU[11]/RELU" -> "33 AlexNet/Sequential[features]/ReLU[11]/SymmetricQuantizer/symmetric_quantize";
"33 AlexNet/Sequential[features]/ReLU[11]/SymmetricQuantizer/symmetric_quantize" -> "34 AlexNet/Sequential[features]/MaxPool2d[12]/max_pool2d";
"34 AlexNet/Sequential[features]/MaxPool2d[12]/max_pool2d" -> "35 AlexNet/Sequential[classifier]/Dropout[0]/dropout";
"35 AlexNet/Sequential[classifier]/Dropout[0]/dropout" -> "39 AlexNet/Sequential[classifier]/NNCFLinear[1]/linear";
"36 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "37 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"37 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "38 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"38 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "39 AlexNet/Sequential[classifier]/NNCFLinear[1]/linear";
"39 AlexNet/Sequential[classifier]/NNCFLinear[1]/linear" -> "40 AlexNet/Sequential[classifier]/ReLU[2]/RELU";
"40 AlexNet/Sequential[classifier]/ReLU[2]/RELU" -> "41 AlexNet/Sequential[classifier]/ReLU[2]/SymmetricQuantizer/symmetric_quantize";
"41 AlexNet/Sequential[classifier]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" -> "42 AlexNet/Sequential[classifier]/Dropout[3]/dropout";
"42 AlexNet/Sequential[classifier]/Dropout[3]/dropout" -> "46 AlexNet/Sequential[classifier]/NNCFLinear[4]/linear";
"43 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "44 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"44 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "45 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"45 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "46 AlexNet/Sequential[classifier]/NNCFLinear[4]/linear";
"46 AlexNet/Sequential[classifier]/NNCFLinear[4]/linear" -> "47 AlexNet/Sequential[classifier]/ReLU[5]/RELU";
"47 AlexNet/Sequential[classifier]/ReLU[5]/RELU" -> "48 AlexNet/Sequential[classifier]/ReLU[5]/SymmetricQuantizer/symmetric_quantize";
"48 AlexNet/Sequential[classifier]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" -> "52 AlexNet/Sequential[classifier]/NNCFLinear[6]/linear";
"49 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "50 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"50 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "51 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"51 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "52 AlexNet/Sequential[classifier]/NNCFLinear[6]/linear";
}
