strict digraph  {
"0 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" [id=0, scope="LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]", type=symmetric_quantize];
"1 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateInputs[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=1, scope="LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateInputs[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"2 LeNet/NNCFConv2d[conv1]/conv2d" [id=2, scope="LeNet/NNCFConv2d[conv1]", type=conv2d];
"3 LeNet/RELU" [id=3, scope=LeNet, type=RELU];
"4 LeNet/SymmetricQuantizer/symmetric_quantize" [id=4, scope="LeNet/SymmetricQuantizer", type=symmetric_quantize];
"5 LeNet/max_pool2d" [id=5, scope=LeNet, type=max_pool2d];
"6 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" [id=6, scope="LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]", type=symmetric_quantize];
"7 LeNet/NNCFConv2d[conv2]/conv2d" [id=7, scope="LeNet/NNCFConv2d[conv2]", type=conv2d];
"8 LeNet/RELU" [id=8, scope=LeNet, type=RELU];
"9 LeNet/SymmetricQuantizer/symmetric_quantize" [id=9, scope="LeNet/SymmetricQuantizer", type=symmetric_quantize];
"10 LeNet/max_pool2d" [id=10, scope=LeNet, type=max_pool2d];
"11 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" [id=11, scope="LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]", type=symmetric_quantize];
"12 LeNet/NNCFLinear[fc1]/linear" [id=12, scope="LeNet/NNCFLinear[fc1]", type=linear];
"13 LeNet/RELU" [id=13, scope=LeNet, type=RELU];
"14 LeNet/SymmetricQuantizer/symmetric_quantize" [id=14, scope="LeNet/SymmetricQuantizer", type=symmetric_quantize];
"15 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" [id=15, scope="LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]", type=symmetric_quantize];
"16 LeNet/NNCFLinear[fc2]/linear" [id=16, scope="LeNet/NNCFLinear[fc2]", type=linear];
"17 LeNet/RELU" [id=17, scope=LeNet, type=RELU];
"18 LeNet/SymmetricQuantizer/symmetric_quantize" [id=18, scope="LeNet/SymmetricQuantizer", type=symmetric_quantize];
"19 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" [id=19, scope="LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]", type=symmetric_quantize];
"20 LeNet/NNCFLinear[fc3]/linear" [id=20, scope="LeNet/NNCFLinear[fc3]", type=linear];
"0 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" -> "2 LeNet/NNCFConv2d[conv1]/conv2d";
"1 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateInputs[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "2 LeNet/NNCFConv2d[conv1]/conv2d";
"2 LeNet/NNCFConv2d[conv1]/conv2d" -> "3 LeNet/RELU";
"3 LeNet/RELU" -> "4 LeNet/SymmetricQuantizer/symmetric_quantize";
"4 LeNet/SymmetricQuantizer/symmetric_quantize" -> "5 LeNet/max_pool2d";
"5 LeNet/max_pool2d" -> "7 LeNet/NNCFConv2d[conv2]/conv2d";
"6 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" -> "7 LeNet/NNCFConv2d[conv2]/conv2d";
"7 LeNet/NNCFConv2d[conv2]/conv2d" -> "8 LeNet/RELU";
"8 LeNet/RELU" -> "9 LeNet/SymmetricQuantizer/symmetric_quantize";
"9 LeNet/SymmetricQuantizer/symmetric_quantize" -> "10 LeNet/max_pool2d";
"10 LeNet/max_pool2d" -> "12 LeNet/NNCFLinear[fc1]/linear";
"11 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" -> "12 LeNet/NNCFLinear[fc1]/linear";
"12 LeNet/NNCFLinear[fc1]/linear" -> "13 LeNet/RELU";
"13 LeNet/RELU" -> "14 LeNet/SymmetricQuantizer/symmetric_quantize";
"14 LeNet/SymmetricQuantizer/symmetric_quantize" -> "16 LeNet/NNCFLinear[fc2]/linear";
"15 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" -> "16 LeNet/NNCFLinear[fc2]/linear";
"16 LeNet/NNCFLinear[fc2]/linear" -> "17 LeNet/RELU";
"17 LeNet/RELU" -> "18 LeNet/SymmetricQuantizer/symmetric_quantize";
"18 LeNet/SymmetricQuantizer/symmetric_quantize" -> "20 LeNet/NNCFLinear[fc3]/linear";
"19 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" -> "20 LeNet/NNCFLinear[fc3]/linear";
}
