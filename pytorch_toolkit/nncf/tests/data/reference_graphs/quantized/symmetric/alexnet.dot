strict digraph  {
"0 /nncf_model_input" [id=0, scope="", type=nncf_model_input];
"1 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" [id=1, scope="AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]", type=symmetric_quantize];
"2 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateInputs[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=2, scope="AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateInputs[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"3 AlexNet/Sequential[features]/NNCFConv2d[0]/conv2d" [id=3, scope="AlexNet/Sequential[features]/NNCFConv2d[0]", type=conv2d];
"4 AlexNet/Sequential[features]/ReLU[1]/RELU" [id=4, scope="AlexNet/Sequential[features]/ReLU[1]", type=RELU];
"5 AlexNet/Sequential[features]/ReLU[1]/SymmetricQuantizer/symmetric_quantize" [id=5, scope="AlexNet/Sequential[features]/ReLU[1]/SymmetricQuantizer", type=symmetric_quantize];
"6 AlexNet/Sequential[features]/MaxPool2d[2]/max_pool2d" [id=6, scope="AlexNet/Sequential[features]/MaxPool2d[2]", type=max_pool2d];
"7 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" [id=7, scope="AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]", type=symmetric_quantize];
"8 AlexNet/Sequential[features]/NNCFConv2d[3]/conv2d" [id=8, scope="AlexNet/Sequential[features]/NNCFConv2d[3]", type=conv2d];
"9 AlexNet/Sequential[features]/ReLU[4]/RELU" [id=9, scope="AlexNet/Sequential[features]/ReLU[4]", type=RELU];
"10 AlexNet/Sequential[features]/ReLU[4]/SymmetricQuantizer/symmetric_quantize" [id=10, scope="AlexNet/Sequential[features]/ReLU[4]/SymmetricQuantizer", type=symmetric_quantize];
"11 AlexNet/Sequential[features]/MaxPool2d[5]/max_pool2d" [id=11, scope="AlexNet/Sequential[features]/MaxPool2d[5]", type=max_pool2d];
"12 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" [id=12, scope="AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]", type=symmetric_quantize];
"13 AlexNet/Sequential[features]/NNCFConv2d[6]/conv2d" [id=13, scope="AlexNet/Sequential[features]/NNCFConv2d[6]", type=conv2d];
"14 AlexNet/Sequential[features]/ReLU[7]/RELU" [id=14, scope="AlexNet/Sequential[features]/ReLU[7]", type=RELU];
"15 AlexNet/Sequential[features]/ReLU[7]/SymmetricQuantizer/symmetric_quantize" [id=15, scope="AlexNet/Sequential[features]/ReLU[7]/SymmetricQuantizer", type=symmetric_quantize];
"16 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" [id=16, scope="AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]", type=symmetric_quantize];
"17 AlexNet/Sequential[features]/NNCFConv2d[8]/conv2d" [id=17, scope="AlexNet/Sequential[features]/NNCFConv2d[8]", type=conv2d];
"18 AlexNet/Sequential[features]/ReLU[9]/RELU" [id=18, scope="AlexNet/Sequential[features]/ReLU[9]", type=RELU];
"19 AlexNet/Sequential[features]/ReLU[9]/SymmetricQuantizer/symmetric_quantize" [id=19, scope="AlexNet/Sequential[features]/ReLU[9]/SymmetricQuantizer", type=symmetric_quantize];
"20 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" [id=20, scope="AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]", type=symmetric_quantize];
"21 AlexNet/Sequential[features]/NNCFConv2d[10]/conv2d" [id=21, scope="AlexNet/Sequential[features]/NNCFConv2d[10]", type=conv2d];
"22 AlexNet/Sequential[features]/ReLU[11]/RELU" [id=22, scope="AlexNet/Sequential[features]/ReLU[11]", type=RELU];
"23 AlexNet/Sequential[features]/ReLU[11]/SymmetricQuantizer/symmetric_quantize" [id=23, scope="AlexNet/Sequential[features]/ReLU[11]/SymmetricQuantizer", type=symmetric_quantize];
"24 AlexNet/Sequential[features]/MaxPool2d[12]/max_pool2d" [id=24, scope="AlexNet/Sequential[features]/MaxPool2d[12]", type=max_pool2d];
"25 AlexNet/Sequential[classifier]/Dropout[0]/dropout" [id=25, scope="AlexNet/Sequential[classifier]/Dropout[0]", type=dropout];
"26 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" [id=26, scope="AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]", type=symmetric_quantize];
"27 AlexNet/Sequential[classifier]/NNCFLinear[1]/linear" [id=27, scope="AlexNet/Sequential[classifier]/NNCFLinear[1]", type=linear];
"28 AlexNet/Sequential[classifier]/ReLU[2]/RELU" [id=28, scope="AlexNet/Sequential[classifier]/ReLU[2]", type=RELU];
"29 AlexNet/Sequential[classifier]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" [id=29, scope="AlexNet/Sequential[classifier]/ReLU[2]/SymmetricQuantizer", type=symmetric_quantize];
"30 AlexNet/Sequential[classifier]/Dropout[3]/dropout" [id=30, scope="AlexNet/Sequential[classifier]/Dropout[3]", type=dropout];
"31 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" [id=31, scope="AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]", type=symmetric_quantize];
"32 AlexNet/Sequential[classifier]/NNCFLinear[4]/linear" [id=32, scope="AlexNet/Sequential[classifier]/NNCFLinear[4]", type=linear];
"33 AlexNet/Sequential[classifier]/ReLU[5]/RELU" [id=33, scope="AlexNet/Sequential[classifier]/ReLU[5]", type=RELU];
"34 AlexNet/Sequential[classifier]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" [id=34, scope="AlexNet/Sequential[classifier]/ReLU[5]/SymmetricQuantizer", type=symmetric_quantize];
"35 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" [id=35, scope="AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]", type=symmetric_quantize];
"36 AlexNet/Sequential[classifier]/NNCFLinear[6]/linear" [id=36, scope="AlexNet/Sequential[classifier]/NNCFLinear[6]", type=linear];
"0 /nncf_model_input" -> "2 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateInputs[1]/SymmetricQuantizer[op]/symmetric_quantize";
"1 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" -> "3 AlexNet/Sequential[features]/NNCFConv2d[0]/conv2d";
"2 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateInputs[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "3 AlexNet/Sequential[features]/NNCFConv2d[0]/conv2d";
"3 AlexNet/Sequential[features]/NNCFConv2d[0]/conv2d" -> "4 AlexNet/Sequential[features]/ReLU[1]/RELU";
"4 AlexNet/Sequential[features]/ReLU[1]/RELU" -> "5 AlexNet/Sequential[features]/ReLU[1]/SymmetricQuantizer/symmetric_quantize";
"5 AlexNet/Sequential[features]/ReLU[1]/SymmetricQuantizer/symmetric_quantize" -> "6 AlexNet/Sequential[features]/MaxPool2d[2]/max_pool2d";
"6 AlexNet/Sequential[features]/MaxPool2d[2]/max_pool2d" -> "8 AlexNet/Sequential[features]/NNCFConv2d[3]/conv2d";
"7 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" -> "8 AlexNet/Sequential[features]/NNCFConv2d[3]/conv2d";
"8 AlexNet/Sequential[features]/NNCFConv2d[3]/conv2d" -> "9 AlexNet/Sequential[features]/ReLU[4]/RELU";
"9 AlexNet/Sequential[features]/ReLU[4]/RELU" -> "10 AlexNet/Sequential[features]/ReLU[4]/SymmetricQuantizer/symmetric_quantize";
"10 AlexNet/Sequential[features]/ReLU[4]/SymmetricQuantizer/symmetric_quantize" -> "11 AlexNet/Sequential[features]/MaxPool2d[5]/max_pool2d";
"11 AlexNet/Sequential[features]/MaxPool2d[5]/max_pool2d" -> "13 AlexNet/Sequential[features]/NNCFConv2d[6]/conv2d";
"12 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" -> "13 AlexNet/Sequential[features]/NNCFConv2d[6]/conv2d";
"13 AlexNet/Sequential[features]/NNCFConv2d[6]/conv2d" -> "14 AlexNet/Sequential[features]/ReLU[7]/RELU";
"14 AlexNet/Sequential[features]/ReLU[7]/RELU" -> "15 AlexNet/Sequential[features]/ReLU[7]/SymmetricQuantizer/symmetric_quantize";
"15 AlexNet/Sequential[features]/ReLU[7]/SymmetricQuantizer/symmetric_quantize" -> "17 AlexNet/Sequential[features]/NNCFConv2d[8]/conv2d";
"16 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" -> "17 AlexNet/Sequential[features]/NNCFConv2d[8]/conv2d";
"17 AlexNet/Sequential[features]/NNCFConv2d[8]/conv2d" -> "18 AlexNet/Sequential[features]/ReLU[9]/RELU";
"18 AlexNet/Sequential[features]/ReLU[9]/RELU" -> "19 AlexNet/Sequential[features]/ReLU[9]/SymmetricQuantizer/symmetric_quantize";
"19 AlexNet/Sequential[features]/ReLU[9]/SymmetricQuantizer/symmetric_quantize" -> "21 AlexNet/Sequential[features]/NNCFConv2d[10]/conv2d";
"20 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" -> "21 AlexNet/Sequential[features]/NNCFConv2d[10]/conv2d";
"21 AlexNet/Sequential[features]/NNCFConv2d[10]/conv2d" -> "22 AlexNet/Sequential[features]/ReLU[11]/RELU";
"22 AlexNet/Sequential[features]/ReLU[11]/RELU" -> "23 AlexNet/Sequential[features]/ReLU[11]/SymmetricQuantizer/symmetric_quantize";
"23 AlexNet/Sequential[features]/ReLU[11]/SymmetricQuantizer/symmetric_quantize" -> "24 AlexNet/Sequential[features]/MaxPool2d[12]/max_pool2d";
"24 AlexNet/Sequential[features]/MaxPool2d[12]/max_pool2d" -> "25 AlexNet/Sequential[classifier]/Dropout[0]/dropout";
"25 AlexNet/Sequential[classifier]/Dropout[0]/dropout" -> "27 AlexNet/Sequential[classifier]/NNCFLinear[1]/linear";
"26 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" -> "27 AlexNet/Sequential[classifier]/NNCFLinear[1]/linear";
"27 AlexNet/Sequential[classifier]/NNCFLinear[1]/linear" -> "28 AlexNet/Sequential[classifier]/ReLU[2]/RELU";
"28 AlexNet/Sequential[classifier]/ReLU[2]/RELU" -> "29 AlexNet/Sequential[classifier]/ReLU[2]/SymmetricQuantizer/symmetric_quantize";
"29 AlexNet/Sequential[classifier]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" -> "30 AlexNet/Sequential[classifier]/Dropout[3]/dropout";
"30 AlexNet/Sequential[classifier]/Dropout[3]/dropout" -> "32 AlexNet/Sequential[classifier]/NNCFLinear[4]/linear";
"31 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" -> "32 AlexNet/Sequential[classifier]/NNCFLinear[4]/linear";
"32 AlexNet/Sequential[classifier]/NNCFLinear[4]/linear" -> "33 AlexNet/Sequential[classifier]/ReLU[5]/RELU";
"33 AlexNet/Sequential[classifier]/ReLU[5]/RELU" -> "34 AlexNet/Sequential[classifier]/ReLU[5]/SymmetricQuantizer/symmetric_quantize";
"34 AlexNet/Sequential[classifier]/ReLU[5]/SymmetricQuantizer/symmetric_quantize" -> "36 AlexNet/Sequential[classifier]/NNCFLinear[6]/linear";
"35 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]/symmetric_quantize" -> "36 AlexNet/Sequential[classifier]/NNCFLinear[6]/linear";
}
