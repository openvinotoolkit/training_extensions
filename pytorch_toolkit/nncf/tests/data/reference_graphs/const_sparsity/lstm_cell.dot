strict digraph  {
"0 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/BinaryMask[op]/apply_binary_mask" [id=0, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/BinaryMask[op]", type=apply_binary_mask];
"1 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/linear" [id=1, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]", type=linear];
"2 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/BinaryMask[op]/apply_binary_mask" [id=2, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/BinaryMask[op]", type=apply_binary_mask];
"3 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/linear" [id=3, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]", type=linear];
"4 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__" [id=4, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=__add__];
"5 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid" [id=5, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=sigmoid];
"6 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid" [id=6, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=sigmoid];
"7 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/tanh" [id=7, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=tanh];
"8 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid" [id=8, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=sigmoid];
"9 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__" [id=9, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=__mul__];
"10 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__" [id=10, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=__mul__];
"11 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__" [id=11, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=__add__];
"12 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/tanh" [id=12, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=tanh];
"13 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__" [id=13, scope="LSTMCellNNCF/LSTMCellForwardNNCF[cell]", type=__mul__];
"0 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/BinaryMask[op]/apply_binary_mask" -> "1 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/linear";
"1 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[input_linear]/linear" -> "4 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__";
"2 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/ModuleDict[pre_ops]/UpdateWeight[0]/BinaryMask[op]/apply_binary_mask" -> "3 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/linear";
"3 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/NNCFLinear[hidden_linear]/linear" -> "4 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__";
"4 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__" -> "5 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid";
"4 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__" -> "6 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid";
"4 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__" -> "7 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/tanh";
"4 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__" -> "8 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid";
"6 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid" -> "9 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__";
"5 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid" -> "10 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__";
"7 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/tanh" -> "10 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__";
"8 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/sigmoid" -> "13 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__";
"9 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__" -> "11 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__";
"10 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__" -> "11 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__";
"11 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__add__" -> "12 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/tanh";
"12 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/tanh" -> "13 LSTMCellNNCF/LSTMCellForwardNNCF[cell]/__mul__";
}
