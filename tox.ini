[tox]
isolated_build = true
skip_missing_interpreters = true
envlist =
    pre-commit
    pre-merge
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
; skipsdist = true
=======
skipsdist = true
>>>>>>> updated ci configuration
=======
skipsdist = true
>>>>>>> updated ci configuration
=======
; skipsdist = true
>>>>>>> update ci configuration
=======
; skipsdist = true
>>>>>>> 96628cc38fd9addb84b9540ac8bd142f5e818ee7

[testenv]
basepython = python3
passenv =
    ftp_proxy
    HTTP_PROXY
    HTTPS_PROXY
    CUDA_VISIBLE_DEVICES
deps =
    coverage[toml]
    pytest
    pytest-timeout
    flaky

[testenv:pre-commit]
deps =
    -r{toxinidir}/requirements/dev.txt
    -r{toxinidir}/requirements/base.txt
    -r{toxinidir}/requirements/anomaly.txt
    -r{toxinidir}/requirements/openvino.txt
commands = 
<<<<<<< HEAD
    pip install -e .[mpa] -f https://download.pytorch.org/whl/lts/1.8/torch_lts.html
=======
    ; pip install -e .[mpa]
    # temporary solution to use Datumaro, it will be resolved when public mmdet is available
    pip uninstall pycocotools mmpycocotools -y
    pip install mmpycocotools
    # pre-commit
>>>>>>> 96628cc38fd9addb84b9540ac8bd142f5e818ee7
    pre-commit run --all-files


[testenv:pre-merge]
deps =
    -r{toxinidir}/requirements/base.txt
    -r{toxinidir}/requirements/anomaly.txt
    -r{toxinidir}/requirements/openvino.txt
    -r{toxinidir}/requirements/classification.txt
    -r{toxinidir}/requirements/detection.txt
    -r{toxinidir}/requirements/segmentation.txt
    -r{toxinidir}/requirements/action.txt
    coverage
    pytest-timeout
commands =
    # install detection requirements later as mmdet requires torch installed
    # Torch dependency is added to force torch version to remain the same
    ; pip install mmpycocotools mmcv-full==1.3.14
    pip install -e .[mpa] -f https://download.pytorch.org/whl/lts/1.8/torch_lts.html
    # pre-merge teset
    coverage erase
    ; coverage run --include=otx/* -m pytest -ra --showlocals tests/unit tests/integration/cli
    coverage run --include=otx/* -m pytest -ra --showlocals tests/integration/cli/classification/test_classification.py::TestToolsMultiClassClassification::test_otx_train
    coverage report -m --fail-under=0
    coverage xml -o {toxworkdir}/coverage.xml


[testenv:anomaly]
; This is an environment to run anomaly tests only.
deps =
    -r{toxinidir}/requirements/base.txt
    -r{toxinidir}/requirements/anomaly.txt
    -r{toxinidir}/requirements/openvino.txt
    coverage
commands =
    coverage erase
    coverage run --include=otx/* -m pytest -ra --showlocals tests/integration/cli/anomaly/
    coverage report -m
    coverage xml -o {toxworkdir}/coverage.xml


[testenv:classification]
; This is an environment to run classification tests only.
deps =
    -r{toxinidir}/requirements/base.txt
    -r{toxinidir}/requirements/openvino.txt
    coverage
commands =
    # install classification requirements later as mmdet requires torch installed.
    # Torch dependency is added to force torch version to remain the same
    pip install -e .[classification]
    coverage erase
    coverage run --include=otx/* -m pytest -ra --showlocals tests/integration/cli/classification/
    coverage report -m
    coverage xml -o {toxworkdir}/coverage.xml


[testenv:detection]
; This is an environment to run detection tests only.
deps =
    -r{toxinidir}/requirements/base.txt
    -r{toxinidir}/requirements/openvino.txt
    coverage
commands =
    # install detection requirements later as mmdet requires torch installed.
    # Torch dependency is added to force torch version to remain the same
    pip install -e .[detection]
    # pre-merge test
    coverage erase
    coverage run --include=otx/* -m pytest -ra --showlocals tests/integration/cli/detection/
    coverage report -m
    coverage xml -o {toxworkdir}/coverage.xml


[testenv:segmentation]
; This is an environment to run detection tests only.
deps =
    -r{toxinidir}/requirements/base.txt
    -r{toxinidir}/requirements/openvino.txt
    coverage
commands =
    # install detection requirements later as mmdet requires torch installed.
    # Torch dependency is added to force torch version to remain the same
    pip install -e .[segmentation]
    coverage erase
    coverage run --include=otx/* -m pytest -ra --showlocals tests/integration/cli/segmentation/
    coverage report -m
    coverage xml -o {toxworkdir}/coverage.xml
